// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {
    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    //Checking whether is D instruction or not
    
    

    


    Not(in=instruction[15], out=notInstruction15);
    // A-register input
    Mux16(a=ALUout, b=instruction, sel=notInstruction15, out=ARegInput);
   
    Or(a=instruction[5], b=notInstruction15, out=instruction5);
    // A-register
    ARegister(in=ARegInput, load=instruction5, out=ARegOut, out[0..14]=addressM);


    And(a=instruction[15], b=instruction[4], out=instruction4);
    // D-register
    DRegister(in=ALUout, load=instruction4, out=DRegOut);

    And(a=instruction[15], b=instruction[12], out=instruction12);
    // Whether A or M
    Mux16(a=ARegOut, b=inM, sel=instruction12, out=AMOut);

    // ALU
    ALU(x=DRegOut, y=AMOut, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=ALUout, out=outM, zr=isZero, ng=isNeg);

    And(a=instruction[15], b=instruction[3], out=writeM);
    

    And(a=instruction[15], b=instruction[0], out=instruction0);
    And(a=instruction[15], b=instruction[1], out=instruction1);
    And(a=instruction[15], b=instruction[2], out=instruction2);

    // PC-JUMP-FOO
    
    And(a=instruction2, b=isNeg, out=JLT);

    And(a=instruction1, b=isZero, out=JEQ);
    
    Not(in=isZero, out=notZero);
    Not(in=isNeg, out=isPos);

    And(a=instruction0, b=notZero, out=JGT1);
    And(a=JGT1, b=isPos, out=JGT);

    Or(a=JLT, b=JEQ, out=loadPC1);

    Or(a=loadPC1, b=JGT, out=JMP);

    // PC
    PC(in=ARegOut, load=JMP, inc=true, reset=reset, out[0..14]=pc);
}
